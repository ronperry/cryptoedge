// Package genericblinding provides interface definitions for blind signature schemes
package genericblinding

import (
	"github.com/ronperry/cryptoedge/eccutil"
	"errors"
)

const (
	// TypeBlindingParamClient data identification
	TypeBlindingParamClient = iota + 1
	// TypeClearMessage data identification
	TypeClearMessage
	// TypeBlindingFactors data identification
	TypeBlindingFactors
	// TypeBlindMessage data identification
	TypeBlindMessage
	// TypeBlindSignature data identification
	TypeBlindSignature
	// TypeClearSignature data identification
	TypeClearSignature
	// TypeBlindingParamServer data identification
	TypeBlindingParamServer
)

var (
	// ErrBadScheme is returned if unmarshalling the data for the wrong scheme
	ErrBadScheme = errors.New("blinding: Data does not match scheme")
	// ErrBadType is returned if unmarshalling the data for the wrong scheme
	ErrBadType = errors.New("blinding: Data does not match type")
	// ErrBadSigner is returned if unmarshalling data for a foreign signer
	ErrBadSigner = errors.New("blinding: Foreign signer")
)

// DataType is the type of data encoded in a BlindingData
type DataType int

// BlindingData encapsulates data needed for blinding operations
type BlindingData interface {
	// Marshall returns ASN.1 DER encoded data
	Marshal() ([]byte, error)
	// Unmarshall loads data that was produced by Marshall
	Unmarshal([]byte) (BlindingData, error)
	// UniqueID returns a (globally) unique, 32byte ID for this data structure that can be used for duplicate/reuse testing
	UniqueID() []byte
	// Return .
	SchemeData() (string, DataType, *eccutil.Point)
	//Return() BlindingData
}

// BlindingParamClient is an encoded set of blinding parameters
type BlindingParamClient BlindingData

// ClearMessage is a cleartext message before blinding
type ClearMessage BlindingData

// BlindingFactors are blinding factors generated by a BlindingClient
type BlindingFactors BlindingData

// BlindMessage is a blind message to be signed
type BlindMessage BlindingData

// BlindSignature is a blinded signature
type BlindSignature BlindingData

// ClearSignature is an unblinded Signature
type ClearSignature BlindingData

// BlindingParamServer is an encoded set of blinding parameters
type BlindingParamServer BlindingData

// BlindingClient implements a blind signature client
type BlindingClient interface {
	// Blind a ClearMessage with server-supplied BlindingParamClient
	Blind(BlindingParamClient, ClearMessage) (BlindingFactors, BlindMessage, error)
	// Unblind a BlindSignature of ClearMessage using BlindingFactors
	Unblind(BlindingFactors, ClearMessage, BlindSignature) (ClearSignature, ClearMessage, error)
	// Verify that ClearSignature is a signature of ClearMessage
	Verify(ClearSignature, ClearMessage) (bool, error)
}

// BlindingServer implements a BlindingServer
type BlindingServer interface {
	// Generate one-time BlindingParam
	GetParams() (BlindingParamClient, BlindingParamServer, error)
	// Sign a BlindMessage usign BlindingParam
	Sign(BlindingParamServer, BlindMessage) (BlindSignature, error)
}

// MatchMessage tests parameters of a BlindingData
func MatchMessage(bd BlindingData, testScheme string, testDataType DataType, testPoint *eccutil.Point) (bool, error) {
	scheme, datatype, pubkey := bd.SchemeData()
	if scheme != testScheme {
		return false, ErrBadScheme
	}
	if datatype != testDataType {
		return false, ErrBadType
	}
	if pubkey != nil {
		if !eccutil.PointEqual(pubkey, testPoint) {
			return false, ErrBadSigner
		}
	}
	return true, nil
}
